<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>成长 on Wxf`s Fantasy World</title>
    <link>/tags/%E6%88%90%E9%95%BF/</link>
    <description>Recent content in 成长 on Wxf`s Fantasy World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Aug 2023 17:04:42 +0800</lastBuildDate>
    <atom:link href="/tags/%E6%88%90%E9%95%BF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计人生-okr、gtd</title>
      <link>/resource/%E8%AE%BE%E8%AE%A1%E4%BA%BA%E7%94%9Fokrgtd/</link>
      <pubDate>Wed, 02 Aug 2023 17:04:42 +0800</pubDate>
      <guid>/resource/%E8%AE%BE%E8%AE%A1%E4%BA%BA%E7%94%9Fokrgtd/</guid>
      <description>缘起 去年我花了三个月的时间准备考研；今年我到新公司，设定了多个目标，但是完成情况不尽如人意，所以肯定有什么地方出问题了。印象当中，一般是目标设置的很准确，能抓住问题的核心，但是 在解决过程中出现各种偏离，然后目标被遗忘&#xA;我的想法是，靠个人的意志力没用，需要外部约束保证个人行为的规范，保证行驶在正确轨道，保证下限，这个约束可以是软件，可以是制度，everything。所以我7月份初把《the human lab》的内容用chatgpt翻了一部分，内容是人的身体调优，从神经科学角度阐述应该怎么学习、怎么培养习惯、怎么样吃、怎么样运动、怎么构建亲密关系、怎么激活多巴胺释放&#xA;有人说，你这不是不务正业么，在世俗意义上，没有花时间在挣钱娶媳妇上，确实有点不务正业了&#xA;构建流程 首先我需要找一个OKR工具，个人OKR找到了ios系统上的vision，我初步建立了几个目标，如下:&#xA;初始化管理项框架我选了四个：OKR、GTD、渐进阅读、时间记录&#xA;时间记录不具可行性，我用软件记了一段时间，但是不知道这玩意有啥用，我想重点说说GTD和OKR&#xA;GTD 拿出纸笔，记下今天要做的事情：打扫卫生、看某书的第几章节、某项目需要推进&#xA;然后你正有条不紊的做着事情，一个突发事件飞过来：上次交付的产品界面设计交互性太差，手册写的也不好，客户不知道怎么使用，你去搞下培训。然后看书就延期了&#xA;第二天，你又写下三件事：给老妈打电话、完成某个功能并测试、参加聚会&#xA;然后这个功能实现难度超过了你的预期，接下来三天你都在做这个事情&#xA;很快你的待办列表就花了，到了周复盘的时候，你拿出笔记本，这周好像啥也没干哪。你的脑子就跟笔记本一样乱糟糟。日复一日，时间就这样被浪费了&#xA;所以需要一套程序记录、分发这些待办事项。&#xA;能否成功做成某事，取决于时机是否成熟，时机成熟就是各种条件都具备了。这套系统首先要记录待办项，其次帮我们挑选出具备条件的待办项&#xA;我选的工具是ominifocus，介绍视频如下： OmniFocus + Getting Things Done (GTD)&#xA;第一步很简单，将所有待办事项丢进inbox，等待下一步处理。目的是清空大脑&#xA;然后规范化待办项，拆解一下打扫卫生这个代办项，把它的限制条件都加上：在x时x地，xxx和xxx用xxx工具做了xxx，即我们的行为受到空间、时间、物质的约束。在这个行为完成后得到结果。所以gtd最小单元是一个可执行动作，然后我们给可执行动作加上各种限制&#xA;根据视频描述，三种判断：&#xA;&amp;lt;2min，赶紧执行(短生命周期) delegate，委托给其他人(这里涉及到一个追踪的问题) defer() 如果可执行动作可以拆分成很多步完成，即拆分成很多个可执行动作，那就defer到project，如果只是单独一个动作，defer到single list；有些project性质类似，比如娱乐、party、钓鱼，就可以归类到同一个文件夹；每次defer新的action，看看能不能归纳到之前的项目，避免重复建设。如此，就完成了action的归类（注意：project需要不断维护更新）&#xA;（small tips: 刚开始记录的待办项可能是project，defer后可以裂变出action）&#xA;其次，归类时添加制约因素，用标签，比如，地点约束、人的约束、截至时间&#xA;现在所有待办项都躺在列表了，还需要解决两个问题：待办项以什么顺序执行？怎么保证按计划执行，出现偏离怎么办？&#xA;问题1：&#xA;待办事项过载是迟早的事，所以问题核心是确定待办事项的优先级。这个用到四象限法，加大在重要紧急和重要不紧急事项上的投入。什么是重要的事呢？资源积累或者生产材料的积累，这两个积累不上，让自己快乐也可以&#xA;问题2：&#xA;这个依赖定期review，不同项目有不同review周期，看你觉得哪些项目重要，需要定期核查；我自己&#xA;delegate review，看项目分给哪些人了，快到对方给我递交成果时就通知一下 daily review 清空inbox 写日报 安排明日任务 还有weelky review、monthly review、yearly review待完善。这些东西很难搞&#xA;出现偏离当然是分析偏离原因，要么是action分解不对，要么是个人执行力不强，要么是omnifocus的提示不到位，对症修改，重新执行&#xA;还有一个project review，其实个人更偏好执行某些特定类型的任务，有些project放了一两年不动，这些project必须得到执行&#xA;在回顾一下，首先搜集，然后规范化成最小动作单元或项目，分发、加约束条件，组织；执行（在执行层提到了优先级问题），review发现并修正偏离。&#xA;OKR GTD写了一个小时啊，要命。OKR更难，开始吧&#xA;我先看了《目标》一书，我认为所有人都应该看看这本书，因为OKR最难的是确定目标，而本书则是教你怎么样通过考察常识，考察一套逻辑的假设条件，来提出真正的目标，并找出通向目标的具体路径。&#xA;我不详述书里的内容&#xA;之前我的思考方式：集齐所有材料，然后通过案例建立几根细线，就能以不变应万变&#xA;看完后：必须以一种科学的方式思考我们认为的常识，它是基于什么假设引申出什么结论？这些结论在当前的环境是否适用？如果不适用，应该怎么修改，才可以适应当前环境且不引入更多问题？&#xA;通过阅读本书我得到一套思维程序，还有该思维程序作用于制造业得到的成果：TOC&#xA;拥有了确定目标的能力，就需要具体的落地工具，我找了三个okr的案例，拼接这些断语得到一个合逻辑的okr流程：&#xA;定义 Objective(目的)」，目标，这里的目标并不是冷冰冰的数字目标，而是有一定激励性的价值目标。&#xA;「Key Result」，关键结果，包括实现Objective(目的)的途径描述、Key Result完成之后达到目标的数字评估。</description>
    </item>
    <item>
      <title>《软件开发者路线图》</title>
      <link>/posts/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E8%80%85%E8%B7%AF%E7%BA%BF%E5%9B%BE/</link>
      <pubDate>Tue, 11 Jul 2023 16:20:02 +0800</pubDate>
      <guid>/posts/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E8%80%85%E8%B7%AF%E7%BA%BF%E5%9B%BE/</guid>
      <description>内容组织 这本书是为学徒写的，学徒即进入职场的新人。大概内容是在每个阶段，学徒采取什么策略，才能一步步站稳脚跟，最终成为大师，因为作者也是从学徒过来的，所以内容编排为场景+指导+实践指南，跟着书中的实践指南练习就行&#xA;假设你是公司的老员工，你的知识不在更新，积累的知识足够应付日常工作，以终为始，新人的第一步就是获取老员工的所有知识，达到应付日常工作的目的，然后再做优化。所以我首先研究知识在组织内部的流动过程，看看获取相关知识储备的方向。然后结合该书做具体实践，如下&#xA;组织知识的获取与传播 &amp;lt;第十章 管理组织中的知识获取&amp;gt; &amp;lt;法尔科尼管理方法&amp;gt;&#xA;知识在组织中的获取和传播 组织中的学习过程 心理潜能&#xA;马斯洛：每个人天生具有一种精神潜力，这种精神潜力与“学习速度”相关，即每个人每天能学习的知识是一定数量的 训练必须每天持续不断进行 高潜能的人可能很长一段时间接触不到具有挑战性的学习环境，因此获得的知识并不比常人多 对于需要汲取大量知识的特定工作岗位，应该由具备高潜能的额人才担任\ 目标或职位变动造成原有知识不够用，经过上述2、3、4阶段，该成员最终补充了完整的知识&#xA;组织获取知识阶段 &amp;lt;第五章 组织传播层面的知识创新框架&amp;gt;&amp;lt;知识传播，有效性及其理论&amp;gt;&#xA;资源角度看知识&#xA;“知识”是一种由组织的经验、价值观、相关信息和洞察力组成的动态集合，该集合的框架可以不断评价和吸收新的经验和信息&#xA;组织层面，知识被看作组织的核心资源，组织顺利发展预购取决于是够拥有在有利于知识传播和创造的环境基础上&#xA;根据传播难易程度划分，将知识分为隐性和显性知识两类。显性知识是可以编码的知识，即可以通过口头交流或文字、图表等书面文件清楚的表达的知识。该类知识易于在组织内部和组织之间进行转移，因此并不能给组织带来竞争优势。相比之下，隐性知识是高度个人化的内隐性知识，表现为组织成员积累的技能和经验，因而不仅难于编码和表达，还需要花费大量时间才能获取。该类知识根植于个体思维与所处的环境中，具有群体特征，主要通过成员间交流互动进行传播，且很难在组织间进行转移，因而比显性知识更具价值。具体来说组织隐性知识是内部成员在参与组织实践过程中将个体知识整合后转化而成的组织运行模式和行为惯例，其在技能方面表现为组织独特的核心技能，例如研发和生产技能等，而在认知方面表现为组织文化与价值观等。&#xA;组织内知识传播有效性框架 隐性知识内部化过程：&#xA;知识的内部化传播过程指组织内外成员在密集交互的情境中，知识需求方通过观察、模仿等方式，将获得的显性知识选择性消化吸收(通过局部搜索、经验积累以及日常工作的选择和重新利用所进行的学习)后转为个人知识体系，然后在实践中加以应用的过程。由内部化定义可知，知识主题之间的密集交互，不仅与其知识吸收能力相关，同时也与其所处的空间位置相关，即空间地理临近带来的反馈效应&#xA;显性知识组合化过程：&#xA;组织发展到成熟期，基于内部化过程的知识创新导致资源日趋同质化，此时，组织需要拥有冗余的知识资源以及进行探索式学习的能力，以重新构建知识资源。知识的组合化传播过程指组织内外成员在广泛联络的场景中，将组织零散的显性知识进一步系统化和复杂化，该过程在组织层面可呈现为组织成员通过形成书籍、报告等方便查阅的知识载体使得经过整合的个体知识上升为组织知识并最终形成组织的知识资源库。总的来说，组织在知识重构阶段的创新实践应该侧重于搭建有利于与外部环境进行广泛联络的传播环境并促进内部成员主题整合能力的提升，从而实现内外显性知识的组合化&#xA;渐进式创新：&#xA;渐进式知识创新过程可以通过知识识别、消化和利用三个步骤解释，组织在识别新的隐性知识时，总是倾向于在其原有知识的基础上对专业程度更高的知识进行搜寻，从而决定了知识需求主体获取知识的范围和路径。&#xA;因为劳动分工不同，所以不同组织形成了不同的知识积累依赖途径和显、隐性知识的积累，而这个，也是企业的竞争力所在&#xA;消化吸收外部获取的知识后经过内部化过程转化为组织内隐性知识，实现组织内部知识储备增长&#xA;波兰尼认为隐性知识内嵌于实践活动中，不能以正规的话语形式加以传递，只能通过学徒制的形式在行动与对话中展现、被觉察、被意会，因而对于默会知识的掌握，只能通过“观察、模仿、练习和试错的方式进行”&#xA;简言之，个体获取相关专业知识，在对话场通过和知识主体对话传播，接收到相关知识的知识主体在实践场通过反复练习、不断熟练，达到无需意识操作状态时，主体的思维中就形成了领悟性的隐性知识。&#xA;探索式创新：&#xA;该过程中，知识整合能的绩效之一就是在各类主题的显性知识见建立联系，从而获得多样化的组织知识，以适应外部环境变化&#xA;创新路径&#xA;团队决策&#xA;在环境中进行知识搜寻并与各类知识主题建立连接时，组织应该在内部同时建立处理各类知识的柔性团队，以通过团队决策协调个体知识模块，从而最大限度获取网络协同效应 方向与目标&#xA;组织明确方向和目标，并在外部知识主体见进行传播以促成共同意图的形成，从而可以最小化沟通成本，并使专业化知识的整合更具效率 例行规则&#xA;组织通过对自身文化倡导形成相对完整的知识指导传播过程的行为规则，使其成为明文规定，从而提升知识整合效率 顺序机制&#xA;将知识的整合过程切割成为多个连续性阶段 学徒模式及来源 模式是作者对学徒过程中遇到不同问题的归类，呈现形式为：情景+问题描述+解决方法+行动指南&#xA;书本内容最初提取自两个人学徒期的故事，后来通过访谈对30余位从业者的经验做了检验，主要是检验这些模式是否是针对常见问题的一般解决方法，内容经得住考验&#xA;个人觉得有用的模式及实践 暴露无知 你刚进入一个岗位，有很多你不知道的东西&#xA;暴露无知，最简单的方法就是问问题。如果采用最直接的可用途径，通往熟练工的道路就可以被缩短&#xA;技师所拥有的最重要的品质之一就是学习的能力，他们能找出无知的领域并通过努力工作来减少这样的领域。在学徒期结束，你会掌握一些技术的丝线，凭借这些丝线，你可以在少数的平台和领域中编织出健壮的软件应用&#xA;写下跟工作相关，而且自己不甚了然的五件事，将这份列表放到其他人可以看到的地方，然后随工作内容的改变养成不断更新这一习惯&#xA;正视无知 你需要一些工具和技术，却不知从何开始。在这些工具和技术中，有一些是你周围的没隔热还能看起来都已经了解的，而且别人认为你也了解&#xA;采用一种对你最有效的方法来做这件事。对于某些人，最好的方法可能是阅读能接触到的所有文献和FAQ，来获得知识概览。其他人则可能觉得直接动手构造一个“质脆玩具”才是理解一样东西的最有效途径，不管哪种方式适合你，都不要忘了问问周围的“同道中人”和指导者，看看他们是否愿意指导&#xA;针对“暴露无知”模式中列出的项目，努力学习其中的每一项，每学会一种就把它从列表中划掉。这些新知识又会揭示你以前没注意到的新空白，把这些新空白也加入列表中&#xA;这一块有很多问题，好长时间，一些技术层面的东西没解决 提高带宽 你已经掌握了一组基本技能，但是对软件开发的理解较狭隘，只关注日常工作中的低层次细节&#xA;对学徒来说，提高获取新知识的能力是关键一步，尽管有时只是会多的让人崩溃，你必须开发一些技巧来高效的获取、理解、维持并应用新知识&#xA;我21年意识到这一点，所以找各个领域的悟道者，这些人不管什么行业，都有一套自己的行事逻辑，其中对我影响较大的：徐春、姚尧，一个教投资的方法论，用数据说话；另一个身上有读书人的孤傲，这种心态影响了我。&#xA;现在我主要看rss(150)、微信公众号(120)、twitter list(200)、telegram，涉及到各个领域，有少部分一手信息，其他均为二手信息，但是一手信息我不会分析，所以这个列表要找时间重构 常用工具 每一个项目都充满了需要学习的新东西，但是有些东西是不变的&#xA;找出一组常用的工具并关注它们，最好这些工具是不需要读文档的&amp;ndash;要么你心里知道所有最佳的使用方法，要么你已经将它们写在了博客。有了这些知识，你就能对工作中的特定部分提供可靠的时间估算，从而将峰先限制在新的、未探索过的领域&#xA;写下自己常用的工具列表，如果少于五项，就着手搜寻一些工具，以填补工具箱的空白&#xA;因为一直换电脑，维护了一张windows软件表，主要是msys2+chrome，经测试，非常稳定；另外我也注重个人数据的积累，在安卓手机上用“一木记账”和“应用定时器2”记录开支及时间，syncthing同步emacs笔记&#xA;找人指导 你意识到自己并不是第一个走这条长路的人，你花了大量时间在探索死胡同</description>
    </item>
  </channel>
</rss>
